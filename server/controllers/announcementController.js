const { pool, isConnected } = require('../db');
const socketService = require('../socket');
const messageController = require('./messageController');

// L·∫•y t·∫•t c·∫£ th√¥ng b√°o chung
exports.getAllAnnouncements = async (req, res) => {
  try {
    const [announcements] = await pool.query(`
      SELECT * FROM GeneralAnnouncement
      ORDER BY CreatedAt DESC
    `);
    
    res.json({ 
      success: true, 
      message: 'L·∫•y danh s√°ch th√¥ng b√°o chung th√†nh c√¥ng',
      items: announcements 
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch th√¥ng b√°o chung:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server' 
    });
  }
};

// L·∫•y th√¥ng b√°o chung theo ID
exports.getAnnouncementById = async (req, res) => {
  const { id } = req.params;
  
  if (!id) {
    return res.status(400).json({ 
      success: false, 
      message: 'Thi·∫øu ID th√¥ng b√°o' 
    });
  }
  
  try {
    const [announcements] = await pool.query(`
      SELECT * FROM GeneralAnnouncement
      WHERE AnnouncementID = ?
    `, [id]);
    
    if (announcements.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
      });
    }
    
    res.json({ 
      success: true, 
      message: 'L·∫•y th√¥ng tin th√¥ng b√°o th√†nh c√¥ng',
      data: announcements[0] 
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin th√¥ng b√°o:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server' 
    });
  }
};

// T·∫°o th√¥ng b√°o chung m·ªõi v√† g·ª≠i ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng
exports.createAnnouncement = async (req, res) => {
  const { content, announcementType } = req.body;
  
  if (!content || !announcementType) {
    return res.status(400).json({ 
      success: false, 
      message: 'Thi·∫øu th√¥ng tin th√¥ng b√°o ho·∫∑c lo·∫°i th√¥ng b√°o' 
    });
  }
  
  const connection = await pool.getConnection();
  
  try {
    await connection.beginTransaction();
    
    // Th√™m th√¥ng b√°o v√†o database
    const [result] = await connection.query(`
      INSERT INTO GeneralAnnouncement (AnnouncementContent, AnnouncementType, CreatedAt)
      VALUES (?, ?, NOW())
    `, [content, announcementType]);
    
    const announcementId = result.insertId;
    
    // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (tr·ª´ t√†i kho·∫£n h·ªá th·ªëng ID: 1)
    const [users] = await connection.query(`
      SELECT user_id FROM users
      WHERE user_id != 1 AND role_id = 2
    `);
    
    await connection.commit();
    
    // G·ª≠i th√¥ng b√°o ƒë·∫øn t·ª´ng ng∆∞·ªùi d√πng qua h·ªá th·ªëng tin nh·∫Øn
    const messagePromises = users.map(user => {
      return messageController.sendSystemMessage({
        body: {
          user_id: user.user_id,
          content: `üì¢ TH√îNG B√ÅO H·ªÜ TH·ªêNG üì¢\n\n${content}`
        }
      }, {
        status: () => ({
          json: () => ({})
        })
      });
    });
    
    // ƒê·ª£i t·∫•t c·∫£ tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i xong
    await Promise.all(messagePromises);
    
    // G·ª≠i th√¥ng b√°o qua socket ƒë·ªÉ c·∫≠p nh·∫≠t UI cho t·ª´ng ng∆∞·ªùi d√πng
    const announcementData = {
      announcement_id: announcementId,
      content,
      type: announcementType,
      created_at: new Date()
    };
    
    // G·ª≠i th√¥ng b√°o ƒë·∫øn t·ª´ng ng∆∞·ªùi d√πng ƒëang online
    users.forEach(user => {
      socketService.emitToUser(user.user_id, 'announcement_created', announcementData);
    });
    
    res.status(201).json({
      success: true,
      message: 'ƒê√£ t·∫°o v√† g·ª≠i th√¥ng b√°o chung th√†nh c√¥ng',
      data: {
        announcement_id: announcementId,
        content,
        type: announcementType,
        users_notified: users.length
      }
    });
  } catch (error) {
    await connection.rollback();
    console.error('L·ªói khi t·∫°o th√¥ng b√°o chung:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi t·∫°o th√¥ng b√°o chung' 
    });
  } finally {
    connection.release();
  }
};

// C·∫≠p nh·∫≠t th√¥ng b√°o chung
exports.updateAnnouncement = async (req, res) => {
  const { id } = req.params;
  const { content, announcementType } = req.body;
  
  if (!id) {
    return res.status(400).json({ 
      success: false, 
      message: 'Thi·∫øu ID th√¥ng b√°o' 
    });
  }
  
  if (!content && !announcementType) {
    return res.status(400).json({ 
      success: false, 
      message: 'Kh√¥ng c√≥ th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t' 
    });
  }
  
  try {
    let query = 'UPDATE GeneralAnnouncement SET ';
    const params = [];
    
    if (content) {
      query += 'AnnouncementContent = ?';
      params.push(content);
    }
    
    if (content && announcementType) {
      query += ', ';
    }
    
    if (announcementType) {
      query += 'AnnouncementType = ?';
      params.push(announcementType);
    }
    
    query += ' WHERE AnnouncementID = ?';
    params.push(id);
    
    const [result] = await pool.query(query, params);
    
    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o ho·∫∑c kh√¥ng c√≥ thay ƒë·ªïi'
      });
    }
    
    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng',
      data: {
        announcement_id: parseInt(id),
        content,
        type: announcementType
      }
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o' 
    });
  }
};

// X√≥a th√¥ng b√°o chung
exports.deleteAnnouncement = async (req, res) => {
  const { id } = req.params;
  
  if (!id) {
    return res.status(400).json({ 
      success: false, 
      message: 'Thi·∫øu ID th√¥ng b√°o' 
    });
  }
  
  try {
    const [result] = await pool.query(`
      DELETE FROM GeneralAnnouncement
      WHERE AnnouncementID = ?
    `, [id]);
    
    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
      });
    }
    
    res.json({
      success: true,
      message: 'X√≥a th√¥ng b√°o th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi x√≥a th√¥ng b√°o:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi x√≥a th√¥ng b√°o' 
    });
  }
}; 